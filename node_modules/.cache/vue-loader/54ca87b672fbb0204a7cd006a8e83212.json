{"remainingRequest":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/calamus/calamus/my-project/calamus-vue-element-admin/src/components/canvas/canvas.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/src/components/canvas/canvas.vue","mtime":1573108767911},{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2NhbnZhcyB7CiAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICB6LWluZGV4OiAtMTsKICAgIHRvcDogMDsKICAgIGxlZnQ6IDA7Cn0K"},{"version":3,"sources":["canvas.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA;AACA;AACA;AACA;AACA;AACA","file":"canvas.vue","sourceRoot":"src/components/canvas","sourcesContent":["<template>\n    <canvas id=\"canvas\">\n    </canvas>\n</template>\n<script>\nexport default {\n    name:'CLCanvasBg',\n    props: {\n      //原点数量\n        dotsNum: {\n            type: Number,\n            default: 50\n        },\n        //彩色还是黑白\n        isColor: {\n            type: Boolean,\n            default: true\n        },\n        //圆的颜色\n        roundColor: {\n            type: String,\n            default: \"#999\"\n        },\n        //直线颜色\n        lineColor: {\n            type: String,\n            default: \"#ccc\"\n        }\n    },\n    mounted() {\n        const canvas = document.getElementById(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        const rndCl = () => Math.floor(Math.random() * 225);\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        var base_list = [];\n        canvas.width = width;\n        canvas.height = height;\n        // 绘制园\n        const drawRounds = (obj, index) => {\n            let { x, y, r, color } = obj;\n            ctx.beginPath();\n            ctx.arc(x, y, r, 0, 2 * Math.PI);\n            if (this.isColor) {\n                ctx.fillStyle = color;\n            } else {\n                ctx.fillStyle = this.roundColor\n            }\n            ctx.fill();\n            ctx.closePath();\n        }\n\n        //判断移动方向\n        const controlDirection = (obj) => {\n            if (obj.x >= (width - obj.r)) {\n                obj.controlX = \"left\";\n            } else if (obj.x <= parseInt(obj.r / 2)) {\n                obj.controlX = \"right\";\n            }\n            if (obj.y >= (height - obj.r)) {\n                obj.controlY = \"bottom\";\n            } else if (obj.y <= parseInt(obj.r / 2)) {\n                obj.controlY = \"top\"\n            }\n            return obj\n        }\n        //划线\n        const drawLine = (list) => {\n            list.map((item, index) => {\n                ctx.beginPath();\n                ctx.moveTo(item.x1, item.y1);\n                ctx.lineTo(item.x2, item.y2);\n                ctx.LineWeight = 1;\n                if (this.isColor) {\n                    ctx.strokeStyle = item.color;\n                } else {\n                    ctx.strokeStyle = this.lineColor\n                }\n                ctx.stroke();\n                ctx.closePath();\n            })\n        }\n        //绘制\n        const draw = (list) => {\n            let dots_arr = [];\n            let line_arr = [];\n            list.map((item, index) => {\n                let xy = controlDirection(item);\n                let obj = roundMove(xy);\n                dots_arr.push(obj);\n            });\n            dots_arr.map((item1, index1) => {\n                dots_arr.map((item2, index2) => {\n                    if (item1 !== item2) {\n                        let x = item1.x - item2.x;\n                        let y = item1.y - item2.y;\n                        if (Math.abs(x) < 150 && Math.abs(y) < 150) {\n                            let obj = {\n                                x1: item1.x,\n                                y1: item1.y,\n                                x2: item2.x,\n                                y2: item2.y,\n                                color: item1.color\n                            }\n                            line_arr.push(obj)\n                        }\n                    }\n                })\n            })\n            drawLine(line_arr);\n            dots_arr.map((item, index) => {\n                drawRounds(item, index)\n            })\n            base_list = dots_arr;\n            setTimeout(() => {\n                // if(this.paused){\n                reDraw()\n                // }\n            }, 50)\n        }\n        const reDraw = () => {\n            ctx.clearRect(0, 0, width, height);\n            draw(base_list)\n        }\n        //移动\n        const roundMove = (obj) => {\n            switch (obj.controlX) {\n                case \"right\":\n                    obj.x++;\n                    break;\n                case \"left\":\n                    obj.x--;\n                    break;\n                default:\n            }\n            switch (obj.controlY) {\n                case \"top\":\n                    obj.y++;\n                    break;\n                case \"bottom\":\n                    obj.y--;\n                    break;\n                default:\n            }\n            return obj\n        }\n        //创造圆点\n        const creatDots = () => {\n            let arr = [];\n            for (let i = 0; i < this.dotsNum; i++) {\n                let obj = {};\n                obj.x = parseInt(Math.random() * width);\n                obj.y = parseInt(Math.random() * height);\n                obj.r = parseInt(Math.random() * 10);\n                obj.controlX = parseInt(Math.random() * 10) > 5 ? \"left\" : \"right\"\n                obj.controlY = parseInt(Math.random() * 10) > 5 ? \"bottom\" : \"top\"\n                obj.color = `rgba(${rndCl()},${rndCl()},${rndCl()},.3)`\n                arr.push(obj)\n            }\n            return arr\n        }\n        draw(creatDots())\n        //鼠标移动\n        const moveXY = (event) => {\n            let obj = {};\n            obj.x = event.clientX;\n            obj.y = event.clientY;\n            obj.r = 0;\n            base_list[0] = obj;\n            base_list[0][\"r\"] = 1;\n        }\n        //鼠标点击\n        const addXY = (event) => {\n            let obj = {};\n            obj.x = event.clientX;\n            obj.y = event.clientY;\n            obj.r = parseInt(Math.random() * 10);\n            obj.color = `rgba(${rndCl()},${rndCl()},${rndCl()},.3)`;\n            obj.controlX = parseInt(Math.random() * 10) > 5 ? 'left' : 'right'\n            obj.controlY = parseInt(Math.random() * 10) > 5 ? 'bottom' : 'top'\n            base_list.push(obj);\n        }\n        window.addEventListener(\"mousemove\", moveXY);\n        window.addEventListener(\"click\", addXY)\n    },\n};\n\n</script>\n<style>\n#canvas {\n    position: fixed;\n    z-index: -1;\n    top: 0;\n    left: 0;\n}\n</style>\n"]}]}