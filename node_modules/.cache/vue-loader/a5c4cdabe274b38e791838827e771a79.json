{"remainingRequest":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/vue-echarts/components/ECharts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/vue-echarts/components/ECharts.vue","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/calamus-vue-element-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBlY2hhcnRzIGZyb20gJ2VjaGFydHMvbGliL2VjaGFydHMnCmltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2gvZGVib3VuY2UnCmltcG9ydCB7IGFkZExpc3RlbmVyLCByZW1vdmVMaXN0ZW5lciB9IGZyb20gJ3Jlc2l6ZS1kZXRlY3RvcicKCi8vIGVudW1lcmF0aW5nIEVDaGFydHMgZXZlbnRzIGZvciBub3cKY29uc3QgRVZFTlRTID0gWwogICdsZWdlbmRzZWxlY3RjaGFuZ2VkJywKICAnbGVnZW5kc2VsZWN0ZWQnLAogICdsZWdlbmR1bnNlbGVjdGVkJywKICAnbGVnZW5kc2Nyb2xsJywKICAnZGF0YXpvb20nLAogICdkYXRhcmFuZ2VzZWxlY3RlZCcsCiAgJ3RpbWVsaW5lY2hhbmdlZCcsCiAgJ3RpbWVsaW5lcGxheWNoYW5nZWQnLAogICdyZXN0b3JlJywKICAnZGF0YXZpZXdjaGFuZ2VkJywKICAnbWFnaWN0eXBlY2hhbmdlZCcsCiAgJ2dlb3NlbGVjdGNoYW5nZWQnLAogICdnZW9zZWxlY3RlZCcsCiAgJ2dlb3Vuc2VsZWN0ZWQnLAogICdwaWVzZWxlY3RjaGFuZ2VkJywKICAncGllc2VsZWN0ZWQnLAogICdwaWV1bnNlbGVjdGVkJywKICAnbWFwc2VsZWN0Y2hhbmdlZCcsCiAgJ21hcHNlbGVjdGVkJywKICAnbWFwdW5zZWxlY3RlZCcsCiAgJ2F4aXNhcmVhc2VsZWN0ZWQnLAogICdmb2N1c25vZGVhZGphY2VuY3knLAogICd1bmZvY3Vzbm9kZWFkamFjZW5jeScsCiAgJ2JydXNoJywKICAnYnJ1c2hzZWxlY3RlZCcsCiAgJ3JlbmRlcmVkJywKICAnZmluaXNoZWQnLAogICdjbGljaycsCiAgJ2RibGNsaWNrJywKICAnbW91c2VvdmVyJywKICAnbW91c2VvdXQnLAogICdtb3VzZW1vdmUnLAogICdtb3VzZWRvd24nLAogICdtb3VzZXVwJywKICAnZ2xvYmFsb3V0JywKICAnY29udGV4dG1lbnUnCl0KCmNvbnN0IElOSVRfVFJJR0dFUlMgPSBbJ3RoZW1lJywgJ2luaXRPcHRpb25zJywgJ2F1dG9yZXNpemUnXQpjb25zdCBSRVdBVENIX1RSSUdHRVJTID0gWydtYW51YWxVcGRhdGUnLCAnd2F0Y2hTaGFsbG93J10KCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgb3B0aW9uczogT2JqZWN0LAogICAgdGhlbWU6IFtTdHJpbmcsIE9iamVjdF0sCiAgICBpbml0T3B0aW9uczogT2JqZWN0LAogICAgZ3JvdXA6IFN0cmluZywKICAgIGF1dG9yZXNpemU6IEJvb2xlYW4sCiAgICB3YXRjaFNoYWxsb3c6IEJvb2xlYW4sCiAgICBtYW51YWxVcGRhdGU6IEJvb2xlYW4KICB9LAogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgbGFzdEFyZWE6IDAKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBncm91cCAoZ3JvdXApIHsKICAgICAgdGhpcy5jaGFydC5ncm91cCA9IGdyb3VwCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyBwcm92aWRlIGEgZXhwbGljaXQgbWVyZ2Ugb3B0aW9uIG1ldGhvZAogICAgbWVyZ2VPcHRpb25zIChvcHRpb25zLCBub3RNZXJnZSwgbGF6eVVwZGF0ZSkgewogICAgICBpZiAodGhpcy5tYW51YWxVcGRhdGUpIHsKICAgICAgICB0aGlzLm1hbnVhbE9wdGlvbnMgPSBvcHRpb25zCiAgICAgIH0KCiAgICAgIGlmICghdGhpcy5jaGFydCkgewogICAgICAgIHRoaXMuaW5pdCgpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5kZWxlZ2F0ZU1ldGhvZCgnc2V0T3B0aW9uJywgb3B0aW9ucywgbm90TWVyZ2UsIGxhenlVcGRhdGUpCiAgICAgIH0KICAgIH0sCiAgICAvLyBqdXN0IGRlbGVnYXRlcyBFQ2hhcnRzIG1ldGhvZHMgdG8gVnVlIGNvbXBvbmVudAogICAgLy8gdXNlIGV4cGxpY2l0IHBhcmFtcyB0byByZWR1Y2UgdHJhbnNwaWxlZCBzaXplIGZvciBub3cKICAgIGFwcGVuZERhdGEgKHBhcmFtcykgewogICAgICB0aGlzLmRlbGVnYXRlTWV0aG9kKCdhcHBlbmREYXRhJywgcGFyYW1zKQogICAgfSwKICAgIHJlc2l6ZSAob3B0aW9ucykgewogICAgICB0aGlzLmRlbGVnYXRlTWV0aG9kKCdyZXNpemUnLCBvcHRpb25zKQogICAgfSwKICAgIGRpc3BhdGNoQWN0aW9uIChwYXlsb2FkKSB7CiAgICAgIHRoaXMuZGVsZWdhdGVNZXRob2QoJ2Rpc3BhdGNoQWN0aW9uJywgcGF5bG9hZCkKICAgIH0sCiAgICBjb252ZXJ0VG9QaXhlbCAoZmluZGVyLCB2YWx1ZSkgewogICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZU1ldGhvZCgnY29udmVydFRvUGl4ZWwnLCBmaW5kZXIsIHZhbHVlKQogICAgfSwKICAgIGNvbnZlcnRGcm9tUGl4ZWwgKGZpbmRlciwgdmFsdWUpIHsKICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGVNZXRob2QoJ2NvbnZlcnRGcm9tUGl4ZWwnLCBmaW5kZXIsIHZhbHVlKQogICAgfSwKICAgIGNvbnRhaW5QaXhlbCAoZmluZGVyLCB2YWx1ZSkgewogICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZU1ldGhvZCgnY29udGFpblBpeGVsJywgZmluZGVyLCB2YWx1ZSkKICAgIH0sCiAgICBzaG93TG9hZGluZyAodHlwZSwgb3B0aW9ucykgewogICAgICB0aGlzLmRlbGVnYXRlTWV0aG9kKCdzaG93TG9hZGluZycsIHR5cGUsIG9wdGlvbnMpCiAgICB9LAogICAgaGlkZUxvYWRpbmcgKCkgewogICAgICB0aGlzLmRlbGVnYXRlTWV0aG9kKCdoaWRlTG9hZGluZycpCiAgICB9LAogICAgZ2V0RGF0YVVSTCAob3B0aW9ucykgewogICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZU1ldGhvZCgnZ2V0RGF0YVVSTCcsIG9wdGlvbnMpCiAgICB9LAogICAgZ2V0Q29ubmVjdGVkRGF0YVVSTCAob3B0aW9ucykgewogICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZU1ldGhvZCgnZ2V0Q29ubmVjdGVkRGF0YVVSTCcsIG9wdGlvbnMpCiAgICB9LAogICAgY2xlYXIgKCkgewogICAgICB0aGlzLmRlbGVnYXRlTWV0aG9kKCdjbGVhcicpCiAgICB9LAogICAgZGlzcG9zZSAoKSB7CiAgICAgIHRoaXMuZGVsZWdhdGVNZXRob2QoJ2Rpc3Bvc2UnKQogICAgfSwKICAgIGRlbGVnYXRlTWV0aG9kIChuYW1lLCAuLi5hcmdzKSB7CiAgICAgIGlmICghdGhpcy5jaGFydCkgewogICAgICAgIHRoaXMuaW5pdCgpCiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuY2hhcnRbbmFtZV0oLi4uYXJncykKICAgIH0sCiAgICBkZWxlZ2F0ZUdldCAobWV0aG9kTmFtZSkgewogICAgICBpZiAoIXRoaXMuY2hhcnQpIHsKICAgICAgICB0aGlzLmluaXQoKQogICAgICB9CiAgICAgIHJldHVybiB0aGlzLmNoYXJ0W21ldGhvZE5hbWVdKCkKICAgIH0sCiAgICBnZXRBcmVhICgpIHsKICAgICAgcmV0dXJuIHRoaXMuJGVsLm9mZnNldFdpZHRoICogdGhpcy4kZWwub2Zmc2V0SGVpZ2h0CiAgICB9LAogICAgaW5pdCAoKSB7CiAgICAgIGlmICh0aGlzLmNoYXJ0KSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIGxldCBjaGFydCA9IGVjaGFydHMuaW5pdCh0aGlzLiRlbCwgdGhpcy50aGVtZSwgdGhpcy5pbml0T3B0aW9ucykKCiAgICAgIGlmICh0aGlzLmdyb3VwKSB7CiAgICAgICAgY2hhcnQuZ3JvdXAgPSB0aGlzLmdyb3VwCiAgICAgIH0KCiAgICAgIGNoYXJ0LnNldE9wdGlvbih0aGlzLm1hbnVhbE9wdGlvbnMgfHwgdGhpcy5vcHRpb25zIHx8IHt9LCB0cnVlKQoKICAgICAgLy8gZXhwb3NlIEVDaGFydHMgZXZlbnRzIGFzIGN1c3RvbSBldmVudHMKICAgICAgRVZFTlRTLmZvckVhY2goZXZlbnQgPT4gewogICAgICAgIGNoYXJ0Lm9uKGV2ZW50LCBwYXJhbXMgPT4gewogICAgICAgICAgdGhpcy4kZW1pdChldmVudCwgcGFyYW1zKQogICAgICAgIH0pCiAgICAgIH0pCgogICAgICBpZiAodGhpcy5hdXRvcmVzaXplKSB7CiAgICAgICAgdGhpcy5sYXN0QXJlYSA9IHRoaXMuZ2V0QXJlYSgpCiAgICAgICAgdGhpcy5fX3Jlc2l6ZUhhbmRsZXIgPSBkZWJvdW5jZSgoKSA9PiB7CiAgICAgICAgICBpZiAodGhpcy5sYXN0QXJlYSA9PT0gMCkgewogICAgICAgICAgICAvLyBlbXVsYXRlIGluaXRpYWwgcmVuZGVyIGZvciBpbml0aWFsbHkgaGlkZGVuIGNoYXJ0cwogICAgICAgICAgICB0aGlzLm1lcmdlT3B0aW9ucyh7fSwgdHJ1ZSkKICAgICAgICAgICAgdGhpcy5yZXNpemUoKQogICAgICAgICAgICB0aGlzLm1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMgfHwgdGhpcy5tYW51YWxPcHRpb25zIHx8IHt9LCB0cnVlKQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5yZXNpemUoKQogICAgICAgICAgfQogICAgICAgICAgdGhpcy5sYXN0QXJlYSA9IHRoaXMuZ2V0QXJlYSgpCiAgICAgICAgfSwgMTAwLCB7IGxlYWRpbmc6IHRydWUgfSkKICAgICAgICBhZGRMaXN0ZW5lcih0aGlzLiRlbCwgdGhpcy5fX3Jlc2l6ZUhhbmRsZXIpCiAgICAgIH0KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsKICAgICAgICAvLyBPbmx5IHJlY2FsY3VsYXRlZCB3aGVuIGFjY2Vzc2VkIGZyb20gSmF2YVNjcmlwdC4KICAgICAgICAvLyBXb24ndCB1cGRhdGUgRE9NIG9uIHZhbHVlIGNoYW5nZSBiZWNhdXNlIGdldHRlcnMKICAgICAgICAvLyBkb24ndCBkZXBlbmQgb24gcmVhY3RpdmUgdmFsdWVzCiAgICAgICAgd2lkdGg6IHsKICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgICAgIGdldDogKCkgPT4gewogICAgICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZUdldCgnZ2V0V2lkdGgnKQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgaGVpZ2h0OiB7CiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgICAgICBnZXQ6ICgpID0+IHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGVHZXQoJ2dldEhlaWdodCcpCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBpc0Rpc3Bvc2VkOiB7CiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgICAgICBnZXQ6ICgpID0+IHsKICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5kZWxlZ2F0ZUdldCgnaXNEaXNwb3NlZCcpCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjb21wdXRlZE9wdGlvbnM6IHsKICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgICAgIGdldDogKCkgPT4gewogICAgICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZUdldCgnZ2V0T3B0aW9uJykKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pCgogICAgICB0aGlzLmNoYXJ0ID0gY2hhcnQKICAgIH0sCiAgICBpbml0T3B0aW9uc1dhdGNoZXIgKCkgewogICAgICBpZiAodGhpcy5fX3Vud2F0Y2hPcHRpb25zKSB7CiAgICAgICAgdGhpcy5fX3Vud2F0Y2hPcHRpb25zKCkKICAgICAgICB0aGlzLl9fdW53YXRjaE9wdGlvbnMgPSBudWxsCiAgICAgIH0KCiAgICAgIGlmICghdGhpcy5tYW51YWxVcGRhdGUpIHsKICAgICAgICB0aGlzLl9fdW53YXRjaE9wdGlvbnMgPSB0aGlzLiR3YXRjaCgnb3B0aW9ucycsICh2YWwsIG9sZFZhbCkgPT4gewogICAgICAgICAgaWYgKCF0aGlzLmNoYXJ0ICYmIHZhbCkgewogICAgICAgICAgICB0aGlzLmluaXQoKQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gbXV0YXRpbmcgYG9wdGlvbnNgIHdpbGwgbGVhZCB0byBtZXJnaW5nCiAgICAgICAgICAgIC8vIHJlcGxhY2luZyBpdCB3aXRoIG5ldyByZWZlcmVuY2Ugd2lsbCBsZWFkIHRvIG5vdCBtZXJnaW5nCiAgICAgICAgICAgIC8vIGVnLgogICAgICAgICAgICAvLyBgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zLCB7IC4uLiB9KWAKICAgICAgICAgICAgLy8gd2lsbCB0cmlnZ2VyIGB0aGlzLmNoYXJ0LnNldE9wdGlvbih2YWwsIHRydWUpCiAgICAgICAgICAgIC8vIGB0aGlzLm9wdGlvbnMudGl0bGUudGV4dCA9ICdUcmVuZHMnYAogICAgICAgICAgICAvLyB3aWxsIHRyaWdnZXIgYHRoaXMuY2hhcnQuc2V0T3B0aW9uKHZhbCwgZmFsc2UpYAogICAgICAgICAgICB0aGlzLmNoYXJ0LnNldE9wdGlvbih2YWwsIHZhbCAhPT0gb2xkVmFsKQogICAgICAgICAgfQogICAgICAgIH0sIHsgZGVlcDogIXRoaXMud2F0Y2hTaGFsbG93IH0pCiAgICAgIH0KICAgIH0sCiAgICBkZXN0cm95ICgpIHsKICAgICAgaWYgKHRoaXMuYXV0b3Jlc2l6ZSkgewogICAgICAgIHJlbW92ZUxpc3RlbmVyKHRoaXMuJGVsLCB0aGlzLl9fcmVzaXplSGFuZGxlcikKICAgICAgfQogICAgICB0aGlzLmRpc3Bvc2UoKQogICAgICB0aGlzLmNoYXJ0ID0gbnVsbAogICAgfSwKICAgIHJlZnJlc2ggKCkgewogICAgICBpZiAodGhpcy5jaGFydCkgewogICAgICAgIHRoaXMuZGVzdHJveSgpCiAgICAgICAgdGhpcy5pbml0KCkKICAgICAgfQogICAgfQogIH0sCiAgY3JlYXRlZCAoKSB7CiAgICB0aGlzLmluaXRPcHRpb25zV2F0Y2hlcigpCgogICAgSU5JVF9UUklHR0VSUy5mb3JFYWNoKHByb3AgPT4gewogICAgICB0aGlzLiR3YXRjaChwcm9wLCAoKSA9PiB7CiAgICAgICAgdGhpcy5yZWZyZXNoKCkKICAgICAgfSwgeyBkZWVwOiB0cnVlIH0pCiAgICB9KQoKICAgIFJFV0FUQ0hfVFJJR0dFUlMuZm9yRWFjaChwcm9wID0+IHsKICAgICAgdGhpcy4kd2F0Y2gocHJvcCwgKCkgPT4gewogICAgICAgIHRoaXMuaW5pdE9wdGlvbnNXYXRjaGVyKCkKICAgICAgICB0aGlzLnJlZnJlc2goKQogICAgICB9KQogICAgfSkKICB9LAogIG1vdW50ZWQgKCkgewogICAgLy8gYXV0byBpbml0IGlmIGBvcHRpb25zYCBpcyBhbHJlYWR5IHByb3ZpZGVkCiAgICBpZiAodGhpcy5vcHRpb25zKSB7CiAgICAgIHRoaXMuaW5pdCgpCiAgICB9CiAgfSwKICBhY3RpdmF0ZWQgKCkgewogICAgaWYgKHRoaXMuYXV0b3Jlc2l6ZSkgewogICAgICB0aGlzLmNoYXJ0ICYmIHRoaXMuY2hhcnQucmVzaXplKCkKICAgIH0KICB9LAogIGRlc3Ryb3llZCAoKSB7CiAgICBpZiAodGhpcy5jaGFydCkgewogICAgICB0aGlzLmRlc3Ryb3koKQogICAgfQogIH0sCiAgY29ubmVjdCAoZ3JvdXApIHsKICAgIGlmICh0eXBlb2YgZ3JvdXAgIT09ICdzdHJpbmcnKSB7CiAgICAgIGdyb3VwID0gZ3JvdXAubWFwKGNoYXJ0ID0+IGNoYXJ0LmNoYXJ0KQogICAgfQogICAgZWNoYXJ0cy5jb25uZWN0KGdyb3VwKQogIH0sCiAgZGlzY29ubmVjdCAoZ3JvdXApIHsKICAgIGVjaGFydHMuZGlzQ29ubmVjdChncm91cCkKICB9LAogIHJlZ2lzdGVyTWFwIChtYXBOYW1lLCBnZW9KU09OLCBzcGVjaWFsQXJlYXMpIHsKICAgIGVjaGFydHMucmVnaXN0ZXJNYXAobWFwTmFtZSwgZ2VvSlNPTiwgc3BlY2lhbEFyZWFzKQogIH0sCiAgcmVnaXN0ZXJUaGVtZSAobmFtZSwgdGhlbWUpIHsKICAgIGVjaGFydHMucmVnaXN0ZXJUaGVtZShuYW1lLCB0aGVtZSkKICB9LAogIGdyYXBoaWM6IGVjaGFydHMuZ3JhcGhpYwp9Cg=="},{"version":3,"sources":["ECharts.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ECharts.vue","sourceRoot":"node_modules/vue-echarts/components","sourcesContent":["<template>\n<div class=\"echarts\"/>\n</template>\n\n<style>\n.echarts {\n  width: 600px;\n  height: 400px;\n}\n</style>\n\n<script>\nimport echarts from 'echarts/lib/echarts'\nimport debounce from 'lodash/debounce'\nimport { addListener, removeListener } from 'resize-detector'\n\n// enumerating ECharts events for now\nconst EVENTS = [\n  'legendselectchanged',\n  'legendselected',\n  'legendunselected',\n  'legendscroll',\n  'datazoom',\n  'datarangeselected',\n  'timelinechanged',\n  'timelineplaychanged',\n  'restore',\n  'dataviewchanged',\n  'magictypechanged',\n  'geoselectchanged',\n  'geoselected',\n  'geounselected',\n  'pieselectchanged',\n  'pieselected',\n  'pieunselected',\n  'mapselectchanged',\n  'mapselected',\n  'mapunselected',\n  'axisareaselected',\n  'focusnodeadjacency',\n  'unfocusnodeadjacency',\n  'brush',\n  'brushselected',\n  'rendered',\n  'finished',\n  'click',\n  'dblclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'mousedown',\n  'mouseup',\n  'globalout',\n  'contextmenu'\n]\n\nconst INIT_TRIGGERS = ['theme', 'initOptions', 'autoresize']\nconst REWATCH_TRIGGERS = ['manualUpdate', 'watchShallow']\n\nexport default {\n  props: {\n    options: Object,\n    theme: [String, Object],\n    initOptions: Object,\n    group: String,\n    autoresize: Boolean,\n    watchShallow: Boolean,\n    manualUpdate: Boolean\n  },\n  data () {\n    return {\n      lastArea: 0\n    }\n  },\n  watch: {\n    group (group) {\n      this.chart.group = group\n    }\n  },\n  methods: {\n    // provide a explicit merge option method\n    mergeOptions (options, notMerge, lazyUpdate) {\n      if (this.manualUpdate) {\n        this.manualOptions = options\n      }\n\n      if (!this.chart) {\n        this.init()\n      } else {\n        this.delegateMethod('setOption', options, notMerge, lazyUpdate)\n      }\n    },\n    // just delegates ECharts methods to Vue component\n    // use explicit params to reduce transpiled size for now\n    appendData (params) {\n      this.delegateMethod('appendData', params)\n    },\n    resize (options) {\n      this.delegateMethod('resize', options)\n    },\n    dispatchAction (payload) {\n      this.delegateMethod('dispatchAction', payload)\n    },\n    convertToPixel (finder, value) {\n      return this.delegateMethod('convertToPixel', finder, value)\n    },\n    convertFromPixel (finder, value) {\n      return this.delegateMethod('convertFromPixel', finder, value)\n    },\n    containPixel (finder, value) {\n      return this.delegateMethod('containPixel', finder, value)\n    },\n    showLoading (type, options) {\n      this.delegateMethod('showLoading', type, options)\n    },\n    hideLoading () {\n      this.delegateMethod('hideLoading')\n    },\n    getDataURL (options) {\n      return this.delegateMethod('getDataURL', options)\n    },\n    getConnectedDataURL (options) {\n      return this.delegateMethod('getConnectedDataURL', options)\n    },\n    clear () {\n      this.delegateMethod('clear')\n    },\n    dispose () {\n      this.delegateMethod('dispose')\n    },\n    delegateMethod (name, ...args) {\n      if (!this.chart) {\n        this.init()\n      }\n      return this.chart[name](...args)\n    },\n    delegateGet (methodName) {\n      if (!this.chart) {\n        this.init()\n      }\n      return this.chart[methodName]()\n    },\n    getArea () {\n      return this.$el.offsetWidth * this.$el.offsetHeight\n    },\n    init () {\n      if (this.chart) {\n        return\n      }\n\n      let chart = echarts.init(this.$el, this.theme, this.initOptions)\n\n      if (this.group) {\n        chart.group = this.group\n      }\n\n      chart.setOption(this.manualOptions || this.options || {}, true)\n\n      // expose ECharts events as custom events\n      EVENTS.forEach(event => {\n        chart.on(event, params => {\n          this.$emit(event, params)\n        })\n      })\n\n      if (this.autoresize) {\n        this.lastArea = this.getArea()\n        this.__resizeHandler = debounce(() => {\n          if (this.lastArea === 0) {\n            // emulate initial render for initially hidden charts\n            this.mergeOptions({}, true)\n            this.resize()\n            this.mergeOptions(this.options || this.manualOptions || {}, true)\n          } else {\n            this.resize()\n          }\n          this.lastArea = this.getArea()\n        }, 100, { leading: true })\n        addListener(this.$el, this.__resizeHandler)\n      }\n\n      Object.defineProperties(this, {\n        // Only recalculated when accessed from JavaScript.\n        // Won't update DOM on value change because getters\n        // don't depend on reactive values\n        width: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getWidth')\n          }\n        },\n        height: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getHeight')\n          }\n        },\n        isDisposed: {\n          configurable: true,\n          get: () => {\n            return !!this.delegateGet('isDisposed')\n          }\n        },\n        computedOptions: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getOption')\n          }\n        }\n      })\n\n      this.chart = chart\n    },\n    initOptionsWatcher () {\n      if (this.__unwatchOptions) {\n        this.__unwatchOptions()\n        this.__unwatchOptions = null\n      }\n\n      if (!this.manualUpdate) {\n        this.__unwatchOptions = this.$watch('options', (val, oldVal) => {\n          if (!this.chart && val) {\n            this.init()\n          } else {\n            // mutating `options` will lead to merging\n            // replacing it with new reference will lead to not merging\n            // eg.\n            // `this.options = Object.assign({}, this.options, { ... })`\n            // will trigger `this.chart.setOption(val, true)\n            // `this.options.title.text = 'Trends'`\n            // will trigger `this.chart.setOption(val, false)`\n            this.chart.setOption(val, val !== oldVal)\n          }\n        }, { deep: !this.watchShallow })\n      }\n    },\n    destroy () {\n      if (this.autoresize) {\n        removeListener(this.$el, this.__resizeHandler)\n      }\n      this.dispose()\n      this.chart = null\n    },\n    refresh () {\n      if (this.chart) {\n        this.destroy()\n        this.init()\n      }\n    }\n  },\n  created () {\n    this.initOptionsWatcher()\n\n    INIT_TRIGGERS.forEach(prop => {\n      this.$watch(prop, () => {\n        this.refresh()\n      }, { deep: true })\n    })\n\n    REWATCH_TRIGGERS.forEach(prop => {\n      this.$watch(prop, () => {\n        this.initOptionsWatcher()\n        this.refresh()\n      })\n    })\n  },\n  mounted () {\n    // auto init if `options` is already provided\n    if (this.options) {\n      this.init()\n    }\n  },\n  activated () {\n    if (this.autoresize) {\n      this.chart && this.chart.resize()\n    }\n  },\n  destroyed () {\n    if (this.chart) {\n      this.destroy()\n    }\n  },\n  connect (group) {\n    if (typeof group !== 'string') {\n      group = group.map(chart => chart.chart)\n    }\n    echarts.connect(group)\n  },\n  disconnect (group) {\n    echarts.disConnect(group)\n  },\n  registerMap (mapName, geoJSON, specialAreas) {\n    echarts.registerMap(mapName, geoJSON, specialAreas)\n  },\n  registerTheme (name, theme) {\n    echarts.registerTheme(name, theme)\n  },\n  graphic: echarts.graphic\n}\n</script>\n"]}]}